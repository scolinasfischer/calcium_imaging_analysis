%Last edit Susana Colinas Fischer April 2023

%% BRIEF SUMMARY 
% This script accepts as input the .xls file with the raw green
% fluorescence, red fluorescence and green/red ratios of the RIA neuron
% generated by "ExtractRatiosRaw_RIA.m", neuron and completes all
% subsequent analysis & plots. It is written to analyse calcium imaging
% fluorescence traces recorded from 3 different zones of the RIA neuron
% (nerve ring dorsal, nerve ring ventral, and loop) in worms that have
% undergone mock, aversive, and sexual conditioning. Thus, altogether there
% are 9 groups (3 conditions x 3 zones). 
% 
% 
% Briefly, the analysis steps are:
% - Bleach-correction of each channel (green and red)
%   - Fit an exponential decay curve to the single channel trace
%   - Divide the trace by its fitted exponential
%
% - Calculate ratio of bleach-corrected data
%   - Calculate the ratio between green and red bleach-corrected
%   fluorescence
%   - Smooth the ratio using a moving 5-frame median and calculate the
%     normalised  ratio (R-Rmin/Rmax)
%
%   - Average and plot normalised ratio of each group (condition & zone)
%   - For each zone, plot the normalised average and SEM for all 3 conditions

%% INPUTS 
% - This script requires the .xls files produced by the
%   "ExtractRatiosRaw_RIA.m" script. The list of filename directories must
%   be grouped by condition and zone and pasted in the relevant
%   variables at the start of the script in double commas.
%
% - Input parameters:
%    - "R2cutoff" sets the cutoff level for R-squared value above which
%    bleach correction (dividing raw fluorescence by the fitted
%    exponential) will be carried out (Rsquared value from fitting
%    exponential to raw single channel trace). 
%    Should be set to 0.
%    - "time" sets the length of the video (in seconds) the script will analyse.
%    Should be set to 210 to show both stimulations.
%    - "strain" sets the filename all output files will have in common
%    - "pars" sets additional parameters to the filename all output files
%    will have in common
%    
%
%     - Directories for output data
%       - 9 directories (one per group) to hold the output of bleach-correction
%       - 9 directories (one per group) to hold the output of within-group
%         average of data
%       - 3 directories (one per zone) to hold the plots with all 3 conditions
%         plotted in each zone









% This means
% it takes as input the ratios from all 3 conditions (mock, aversive and
% sexual conditioning) and 2 genotypes (wild-type and pdf-1 mutant. 
% The steps carried out by this script are:
% - Requires input of 
%       - analysis parameters 
%       - input filenames (xls files), grouped by condition & genotype
%       - output directories




%%
%INPUTS


%set stringency level of R2 to use
   R2cutoff = 0; 

%set length of plot for 3condition plots 
   time = 210; 


%strain params
strain = "RIAwt";
pars = "bc_divd_noR";

%filenames to analyse are excels outputted from ExtractRatiosRaw.m 

%dorsal filenames
D_mock_filenames = [
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_20_mock_D00002.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_20_mock_D00008.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_20_mock_D00010.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_20_mock_D00012.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_20_mock_D00013.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_20_mock_D00015.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_20_mock_D00018.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_27_MOCK_D00001.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_27_MOCK_D00005.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_08_mock_D00001.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_08_mock_D00002.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_08_mock_D00003.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_08_mock_D00004.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_08_mock_D00012.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_08_mock_D00015.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_08_mock_D00016.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_13_mock_D00003.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_13_mock_D00007.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_13_mock_D00008.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_13_mock_D00009.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_13_mock_D00012.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_13_mock_D00018.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_08_31_MOCK_D00010.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_08_31_MOCK_D00016.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_08_31_MOCK_D00023.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_08_31_MOCK_D00031.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_08_31_MOCK_D00033.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_08_31_MOCK_D00035.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_08_31_MOCK_D00037.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_08_31_MOCK_D00041.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_08_31_MOCK_D00043.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_08_31_MOCK_D00047.xls";

];

D_avsv_filenames = [
   "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_27_AVSV_D00001.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_27_AVSV_D00003.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_27_AVSV_D00005.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_27_AVSV_D00007.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_27_AVSV_D00009.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_27_AVSV_D00011.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_27_AVSV_D00014.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_27_AVSV_D00017.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_27_AVSV_D00018.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_27_AVSV_D00019.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_13_avsv_D00004.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_13_avsv_D00010.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_13_avsv_D00022.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_13_avsv_D00023.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_24_avsv_D00014.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_24_avsv_D00016.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_24_avsv_D00018.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_24_avsv_D00022.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_24_avsv_D00024.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_24_avsv_D00033.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_24_avsv_D00037.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_24_avsv_D00039.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_24_avsv_D00046.xls";

];

D_sexc_filenames = [
   "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_30_sexc_D00005.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_30_sexc_D00006.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_30_sexc_D00015.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_31_sexc_D00014.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_31_sexc_D00015.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_31_sexc_D00016.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_31_sexc_D00020.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_31_sexc_D00025.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_31_sexc_D00027.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_31_sexc_D00030.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_31_sexc_D00034.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_05_31_sexc_D00038.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_15_sexc_D00002.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_15_sexc_D00011.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_15_sexc_D00013.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_15_sexc_D00018.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_15_sexc_D00023.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_15_sexc_D00025.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_15_sexc_D00026.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_15_sexc_D00027.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_15_sexc_D00041.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_15_sexc_D00043.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_15_sexc_D00048.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/dors/22_06_15_sexc_D00050.xls";


];


%ventral filenames
V_mock_filenames = [
    "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_20_mock_V00002.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_20_mock_V00004.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_20_mock_V00005.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_20_mock_V00015.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_20_mock_V00017.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_20_mock_V00018.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_27_MOCK_V00001.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_27_MOCK_V00003.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_27_MOCK_V00005.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_08_mock_V00002.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_08_mock_V00003.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_08_mock_V00008.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_08_mock_V00010.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_08_mock_V00017.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_13_mock_V00016.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_08_31_MOCK_V00004.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_08_31_MOCK_V00008.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_08_31_MOCK_V00014.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_08_31_MOCK_V00018.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_08_31_MOCK_V00023.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_08_31_MOCK_V00029.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_08_31_MOCK_V00033.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_08_31_MOCK_V00035.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_08_31_MOCK_V00039.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_08_31_MOCK_V00043.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_08_31_MOCK_V00045.xls";
 ];

V_avsv_filenames = [
   "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_27_AVSV_V00001.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_27_AVSV_V00004.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_27_AVSV_V00007.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_27_AVSV_V00008.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_27_AVSV_V00012.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_27_AVSV_V00015.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_27_AVSV_V00017.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_27_AVSV_V00019.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_13_avsv_V00004.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_13_avsv_V00008.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_13_avsv_V00021.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_24_avsv_V00014.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_24_avsv_V00016.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_24_avsv_V00018.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_24_avsv_V00021.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_24_avsv_V00022.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_24_avsv_V00024.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_24_avsv_V00033.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_24_avsv_V00037.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_24_avsv_V00039.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_24_avsv_V00041.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_24_avsv_V00046.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_24_avsv_V00050.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_24_avsv_V00053.xls";

];

V_sexc_filenames = [
   "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_30_sexc_V00002.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_30_sexc_V00003.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_30_sexc_V00008.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_30_sexc_V00011.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_30_sexc_V00014.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_30_sexc_V00015.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_31_sexc_V00007.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_31_sexc_V00008.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_31_sexc_V00009.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_31_sexc_V00012.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_31_sexc_V00015.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_31_sexc_V00027.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_31_sexc_V00031.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_31_sexc_V00032.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_31_sexc_V00035.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_31_sexc_V00037.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_05_31_sexc_V00041.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_15_sexc_V00001.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_15_sexc_V00002.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_15_sexc_V00006.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_15_sexc_V00009.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_15_sexc_V00011.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_15_sexc_V00018.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_15_sexc_V00023.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_15_sexc_V00027.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_15_sexc_V00031.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_15_sexc_V00032.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_15_sexc_V00034.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_15_sexc_V00041.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_15_sexc_V00046.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/vent/22_06_15_sexc_V00048.xls";
];


%loop filenames
L_mock_filenames = [
    "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_20_mock_L00002.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_20_mock_L00004.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_20_mock_L00005.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_20_mock_L00015.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_27_MOCK_L00001.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_27_MOCK_L00005.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_08_mock_L00002.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_08_mock_L00003.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_08_mock_L00008.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_08_mock_L00009.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_13_mock_L00001.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_13_mock_L00005.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_13_mock_L00011.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_13_mock_L00014.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_13_mock_L00016.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_13_mock_L00019.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_13_mock_L00022.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_08_31_MOCK_L00004.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_08_31_MOCK_L00008.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_08_31_MOCK_L00010.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_08_31_MOCK_L00012.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_08_31_MOCK_L00020.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_08_31_MOCK_L00023.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_08_31_MOCK_L00033.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_08_31_MOCK_L00035.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_08_31_MOCK_L00037.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_08_31_MOCK_L00043.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_08_31_MOCK_L00047.xls";
];

L_avsv_filenames = [
    "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_27_AVSV_L00001.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_27_AVSV_L00004.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_27_AVSV_L00007.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_27_AVSV_L00008.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_27_AVSV_L00015.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_27_AVSV_L00017.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_13_avsv_L00008.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_13_avsv_L00012.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_13_avsv_L00013.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_13_avsv_L00017.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_13_avsv_L00021.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_24_avsv_L00014.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_24_avsv_L00016.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_24_avsv_L00018.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_24_avsv_L00021.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_24_avsv_L00022.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_24_avsv_L00024.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_24_avsv_L00033.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_24_avsv_L00037.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_24_avsv_L00039.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_24_avsv_L00046.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_24_avsv_L00050.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_24_avsv_L00053.xls";
 ];


L_sexc_filenames = [
    "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_30_sexc_L00002.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_30_sexc_L00003.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_30_sexc_L00008.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_30_sexc_L00011.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_30_sexc_L00014.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_30_sexc_L00015.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_31_sexc_L00008.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_31_sexc_L00009.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_31_sexc_L00012.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_31_sexc_L00015.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_31_sexc_L00027.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_31_sexc_L00032.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_31_sexc_L00035.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_31_sexc_L00037.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_31_sexc_L00038.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_05_31_sexc_L00041.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_15_sexc_L00002.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_15_sexc_L00006.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_15_sexc_L00009.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_15_sexc_L00011.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_15_sexc_L00018.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_15_sexc_L00023.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_15_sexc_L00027.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_15_sexc_L00031.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_15_sexc_L00034.xls";
"/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/prebleachcorrection/loop/22_06_15_sexc_L00048.xls";

];




%input parent directories where bleach-correction output data will go
pdbcDmock = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/post bleach correction/dividenocutoff/DORS/mock";
pdbcDavsv = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/post bleach correction/dividenocutoff/DORS/avsv";
pdbcDsexc = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/post bleach correction/dividenocutoff/DORS/sexc";

pdbcVmock = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/post bleach correction/dividenocutoff/VENT/mock";
pdbcVavsv = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/post bleach correction/dividenocutoff/VENT/avsv";
pdbcVsexc = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/post bleach correction/dividenocutoff/VENT/sexc";

pdbcLmock = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/post bleach correction/dividenocutoff/LOOP/mock";
pdbcLavsv = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/post bleach correction/dividenocutoff/LOOP/avsv";
pdbcLsexc = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/xls files/RIAwt/post bleach correction/dividenocutoff/LOOP/sexc";


%Input parent directories where smoothed and baseline-adjusted fluorescence ratio output & odata will go
pdR0Dmock = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/analysis output figs smoothed/indv neurons/RIAwt/bleachcorrected/divdnoR/dors/mock";
pdR0Davsv = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/analysis output figs smoothed/indv neurons/RIAwt/bleachcorrected/divdnoR/dors/avsv";
pdR0Dsexc = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/analysis output figs smoothed/indv neurons/RIAwt/bleachcorrected/divdnoR/dors/sexc";

pdR0Vmock = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/analysis output figs smoothed/indv neurons/RIAwt/bleachcorrected/divdnoR/vent/mock";
pdR0Vavsv = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/analysis output figs smoothed/indv neurons/RIAwt/bleachcorrected/divdnoR/vent/avsv";
pdR0Vsexc = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/analysis output figs smoothed/indv neurons/RIAwt/bleachcorrected/divdnoR/vent/sexc";

pdR0Lmock = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/analysis output figs smoothed/indv neurons/RIAwt/bleachcorrected/divdnoR/loop/mock";
pdR0Lavsv = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/analysis output figs smoothed/indv neurons/RIAwt/bleachcorrected/divdnoR/loop/avsv";
pdR0Lsexc = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/analysis output figs smoothed/indv neurons/RIAwt/bleachcorrected/divdnoR/loop/sexc";


%Input parent directories where 3condplots output data will go

pd3cdors = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/analysis output figs smoothed/3conditions/RIAwt/bleachcorrected/divdnoR/dors";
pd3cvent = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/analysis output figs smoothed/3conditions/RIAwt/bleachcorrected/divdnoR/vent";
pd3cloop = "/Volumes/groupfolders/DBIO_Barrios_Lab/IMAGING/analysis output figs smoothed/3conditions/RIAwt/bleachcorrected/divdnoR/loop";


%% 

%cell array that holds cell arrays with all the input data filenames
allfilenames = {
    D_mock_filenames D_avsv_filenames D_sexc_filenames;
    V_mock_filenames V_avsv_filenames V_sexc_filenames;
    L_mock_filenames L_avsv_filenames L_sexc_filenames;

};

clear  D_mock_filenames D_avsv_filenames D_sexc_filenames V_mock_filenames V_avsv_filenames V_sexc_filenames L_mock_filenames L_avsv_filenames L_sexc_filenames

%cell array where parent directories for bc output data will go
%must have same shape and correspondance as input matrix
pdirs_bc = {
    pdbcDmock pdbcDavsv pdbcDsexc;
    pdbcVmock pdbcVavsv pdbcVsexc;
    pdbcLmock pdbcLavsv pdbcLsexc;
    };

clear pdbcDmock pdbcDavsv pdbcDsexc pdbcVmock pdbcVavsv pdbcVsexc pdbcLmock pdbcLavsv pdbcLsexc

%cell array where parent directories for R0plots output data will go
%must have same shape and correspondance as input matrix
pdirs_R0 = {
    pdR0Dmock pdR0Davsv pdR0Dsexc;
    pdR0Vmock pdR0Vavsv pdR0Vsexc;
    pdR0Lmock pdR0Lavsv pdR0Lsexc;
    };

clear pdR0Dmock pdR0Davsv pdR0Dsexc pdR0Vmock pdR0Vavsv pdR0Vsexc pdR0Lmock pdR0Lavsv pdR0Lsexc


%cell array where parent directories for 3condplots output data will go
%must have same geometry as input matrix
pdirs_3c = {
    pd3cdors;
    pd3cvent;
    pd3cloop
    };

clear pd3cdors pd3cvent pd3cloop


%string array with the codes for each condition/zone
codes = [
    "_D_mock_" "_D_avsv_" "_D_sexc_";
    "_V_mock_" "_V_avsv_" "_V_sexc_";
    "_L_mock_" "_L_avsv_" "_L_sexc_";
    ];




%% colors and parameters for plotting
%colours
purplergb   = [0.6039 0.1961 0.8039]; %colors in rgb code /255
grayrgb     = [0.7020 0.7020 0.7020];

mockgray    = [161 159 161]/255;
avsvgreen   = [40 243 40]/255;
sexcondpink = [249 138 122]/255;
pdf1purple  = [120 0 169]/255;
bluergb     = [179 204 255]/255;



% plotting parameters
ploty1  = -2; %lower y axis limit for single traces plots
ploty2  = +2; %upper y axis limit for single traces plots
ploty1avg  = -1; %lower y axis limit for avg traces plots
ploty2avg  = +1; %upper y axis limit for avg traces plots
hmy1    = -0.75; %lower y axis limit for heatmaps nb this sets limit within which scale colors
hmy2    = +1; %upper y axis limit for heatmaps nb this sets limit within which scale colors

bstart = 792;%first frame of baseline
fstart = 790; %frame where frames starts (before is nan)
bend = 891; %last frame of baseline
mend = 2079; %last frame of movie

timesecs = [80 90 120 150 180 210]; %vector containing timepoints in seconds (time since record start)
timeframes  = [792 892 1188 1485 1782 2079]; %vector containing timepoints in frames (time since record start)
timelabels=({'0' '10' '40' '70' '100' '130'});  %cell array containing timepoints in seconds (time since baseline start)

ycoords = [-10 -10 -10 -10 -10 ; +10 +10 +10 +10 +10; +10 +10 +10 +10 +10; -10 -10 -10 -10 -10 ]; %for patch background
colors = [grayrgb; purplergb; grayrgb; purplergb; grayrgb]; 






%% Cycle through all 9 groups
flsize = size(allfilenames);
for r = 1:flsize(1)     %rows are conditions (mock/aversive/sexual conditioning)
    for c = 1:flsize(2) %columns are zones (dorsal/ventral/loop)
    files_to_analyse = allfilenames{r,c};

    %set all output directories
    pdirbc = pdirs_bc{r,c};
    pdirR0 = pdirs_R0{r,c};
    pdir3c = pdirs_3c{r};
    cond = codes(r,c);
    strain_name = strcat(strain, cond, pars); 

    % create variables to hold accross-worm within-condition within-zone data 
    all_adjratios = [];
    raw_all_adjratios = [];
    col_names = {}; %cell array of strings to hold column names to use for output xlsx of all_adjratios

    
    
    %% Cycle through all files in one group 

    
    for e = 1:length (files_to_analyse)

        %Set filename
        fname = files_to_analyse(e);
        short_fname = erase(fname, ".xls");
        s= strfind(fname,'/');
        short_fname = extractAfter(short_fname,max(s));
        clear s
    
        
        %Import data and  assign to variables
        [data] = readmatrix(fname);       
        raw_ratio = data(:,1);% raw GFP/RFP ratio
        smoothraw_ratios = smoothdata(raw_ratio(fstart:mend),1,'movmedian',5); %for plotting later smoothed rawratio
        rawgr = data(:,2:3);   %store green and red raw data in their own matrix
        frames = data(:,4);    % frames 
        secs = data(:,5);      % seconds     
        clear data

        % set length of video to analyse
        frames_to_fit = frames(fstart:mend);     % frames to fit
        seconds_to_fit = secs(fstart:mend);      % seconds to fit
        
        %% Bleach correction:
            %% Bleach-correction: Prep data
            % start for-loop that will run once on raw green and once on raw red of each file
            [m,n]= size(rawgr);
            for ch = 1:n
            
                %the variable "channel" indicates whether currently analysing
                %red or green channel
                if ch == 1
                    channel = 'GREEN';
                elseif ch == 2
                    channel = 'RED';
            
                end
            
                %Prep data
                %raw_data_to_fit is raw data from frame fstart(790) onwards
                raw_data_to_fit = rawgr(:,ch); %raw data to fit is now either green or red
                raw_data_to_fit = smoothdata(raw_data_to_fit(fstart:mend),1,'movmedian',5); %smoothed
                
                %save vector with indices of all nans
                all_nans = find(isnan(raw_data_to_fit));
                
                
                %% Bleach-correction: remove NaNs
                %Cannot fit exponential curve to a series of data
                %containing NaNs so need to remove them. Method applied is to
                %interpolate NaN value or NaN region from nearest value. 
    
                    % - If the first or last value (or stretch of values) is NaN,
                    % it is replaced with the value of nearest non-NaN value
                    % - If a single value is NaN it is replaced with the average of
                    % the two flanking values. 
                    % - If a consecutive stretch of values is all NaN, then the two
                    % nearest non-NaN values flanking the region are used to calculate a
                    % series of linearly spaced intermediate values to replace NaNs
                    % with
    
    
    
                %nc data is nan-corrected data (ie nans have been interpolated)
                nc_data = raw_data_to_fit; 
                this_nan_stretch = []; %vector to hold indices of consecutive nans
                j = 1; %counter for position within this stretch of nans
                nan_stretches = 0; %vector to hold lengths of nan stretches
                
                
                %for-loop to apply NaN-correction  (interpolate by averaging nearest non-nans)
                    for i = 1:length(nc_data)
                        
                        %if first value is nan, replace it with the first non-nan value
                        if i==1 && isnan(nc_data(i)) 
                            N = find(~isnan(nc_data)); %N holds indices of non-nans
                            nc_data(i) = nc_data(N(1)); % replace wth first non-nan value (N(1))
                            
                        end
                        
                        %for all cases in which i >1, if this index has NaN, store index in temp vble
                        if i > 1
                            if isnan(nc_data(i)) %if this index has NaN, store index in temp vble
                                this_nan_stretch(j) = i;
                                j = j +1;
                                
                                %if this nan stretch reaches to the end of the matrix
                                %replace all values with previous non-nan value
                                if (this_nan_stretch(1) + (j-1)) > length(nc_data)
                                    nc_data(this_nan_stretch) = nc_data((this_nan_stretch(1))-1);
                                    nan_stretches = [nan_stretches length(this_nan_stretch)];
                    
                                end
                            
                            %if index >1, is not nan, but prev was nan AND not at end of matrix, calculate avg and insert 
                            elseif ~isnan(nc_data(i))  
                                if isnan(nc_data(i-1))
                                    a = this_nan_stretch(1)-1; %index of last data point before nans
                                    b = this_nan_stretch(end)+1; %index of next point after nans
                                    values = linspace(nc_data(a),nc_data(b),length(this_nan_stretch)+2); %vector w linearly spaced values between a and b (inclusive)
                                    nc_data(a:b) = values'; %substitute interpolated values in dataset. nb need to use transpose of values
                                    nan_stretches = [nan_stretches length(this_nan_stretch)];
                                    j = 1; %reset counter for position within this_nan_stretch
                                    this_nan_stretch = []; %reset this_nan_stretch to empty
                                end
                            end
                        end
                    end
                    
                    clear N a b i j this_nan_stretch values
                
                 
                %% Bleach-correction: fit exponential curve to nan-corrected data
                [params,gof] = fit(frames_to_fit,nc_data,'exp1'); 
                %time on x, raw ratios with interpolated nans is y
                a = params.a;
                k = params.b; %will be negative bc its exponential decay
                R2 = gof.rsquare; %gof returns structure with 5 parameter relating to goodness-of-fit
    
            
            
                %fitted exponential
                expY=a*exp(k*frames_to_fit); %calculate fitted exponential curve
    
                %% Bleach-correction: Divide nan-corrected data by fitted exponential
                    
                    %Evaluate if bleaching correction is needed
                    if R2 >= R2cutoff %only apply bleach correction IF r2>R2cutoff 
    
                        %calculate bleach corrected data (bc_data) by dividing by fitted exponential
                        bc_data = nc_data ./ expY; 
                        bc = "bc"; %variable that tells you this particular file has been bleach-corected (r2>R2cutoff)
                        
                    else %bc green stays same as nc green
                        bc_data = nc_data;
                        bc = "notbc"; %variable that tells you  this particular file has not been bleach-corected (r2<R2cutoff)
                    
                    %replace values that were nans before nan-correction with nans
                    bc_data(all_nans) = NaN;
                    
                    end
                
                
                %% Bleach-correction: Plot nan-corrected data and fitted exponential 
                figure();
                plot(frames_to_fit,nc_data); %plot time vs nan-corrected data
                hold on
                plot(frames_to_fit,expY); %plot time vs exponential
                title(strcat(short_fname,' - ', channel,' - Raw nan-corrected & Fitted exp vs Time.', 'R2=', string(R2)));
                xlim([fstart mend]);
                hold off
                
                
                rawexpYplotname = strcat(short_fname, 'raw_expY', ' - ', channel);
                rawexpYplotname = fullfile(pdirbc,"plots", rawexpYplotname);
                saveas(gcf,rawexpYplotname,'png');
                close
                
    
    
                %% Bleach-correction: Plot bleach-corrected data 
                figure();
                hold on
                title(strcat( short_fname, bc,' - ', channel, '  vs Time'));
                xlim([fstart mend]);
                plot(frames_to_fit,bc_data); %plot time vs bleach corrected data in blue
    
                bleach_correctedplotname = strcat(short_fname, 'bc',' - ', channel);
                bleach_correctedplotname = fullfile(pdirbc,"plots",bleach_correctedplotname);
                saveas(gcf,bleach_correctedplotname,'png');
                close
                
                %% Bleach-correction: Save data separating per channel 
               
                %output summary table 
                summary_vars = ["total_NaNs", "longest_Nan_stretch", "a", "k", "R2"];
                    if ch == 1
                        output_summary_green = table(length((all_nans)), max(nan_stretches),a,k,R2,'VariableNames', summary_vars);
                        bc_green = bc_data;
                        nc_green = nc_data;
                        expY_green = expY;
                        raw_green_to_fit = raw_data_to_fit;
                        bcG = bc;
                    
                        if bcG == "bc" 
                        end
                    
                        clear bc_data nc_data expY raw_data_to_fit channel bc X0 Xmax 
                    
                    elseif ch==2
                        output_summary_red = table(length((all_nans)), max(nan_stretches),a,k,R2,'VariableNames', summary_vars);
                        bc_red = bc_data;                  
                        nc_red = nc_data;
                        expY_red = expY;
                        raw_red_to_fit = raw_data_to_fit;
                        bcR= bc;
    
                        if bcR == "bc" 
                        end
                    
                        clear bc_data nc_data expY raw_data_to_fit channel bc X0 Xmax 
                    end
                
                    
            end
            
            clear m n
            
    
            %% Bleach-correction: Calculate ratio between bleach-corrected green and bleach-corrected red fluorescence
    
            bc_ratio = bc_green./bc_red;
    
    
            
            %% Bleach-correction: Plot bleach-corrected and raw ratio and save plot
            figure()
            hold on
            title(strcat( short_fname, ' - Bleach-corrected and raw ratio vs Time' ,'GREEN', bcG, 'RED', bcR))
            xlim([fstart mend])
            plot(frames_to_fit,bc_ratio, 'Color' ,[255 102 0]/255) %plot time vs bleach corrected(DIVISION) smooth no offset in ORANGE
            plot(frames_to_fit,smoothraw_ratios,'b') %plot time vs non- corrected ratio in BLUE
            both_ratiosname = strcat(short_fname,'ratios_versions');
            both_ratiosname = fullfile(pdirbc,"plots",both_ratiosname);
            saveas(gcf,both_ratiosname,'png');
            close
            
            
            
            %% Bleach-correction: Save output of bleach-correction data & bleach-correction summary
            %Save data into tables to output
            data_vars = [ "frames_to_fit", "secs_to_fit", "green_data_to_fit", "red_data_to_fit","nan-removed from green data to fit","nan-removed from red data to fit", "fitted exponential green ", "fitted exponential red ", "bleach-corrected green", "bleach-corrected red", " bleach-corrected ratio"];
            output_data = table( frames_to_fit, seconds_to_fit, raw_green_to_fit, raw_red_to_fit, nc_green, nc_red, expY_green, expY_red, bc_green, bc_red, bc_ratio, 'VariableNames', data_vars); 
            
            %Write tables into an excel spreadsheet with 3 worksheets (data, summaryGREEN, summaryRED)
            output_fname = strcat(short_fname,'_bc_output.xls');
            output_fname = fullfile(pdirbc,"xls",output_fname);
            writetable(output_data, output_fname, 'Sheet', 'data');
            writetable(output_summary_green, output_fname, 'Sheet', 'summary_green');
            writetable(output_summary_red, output_fname, 'Sheet', 'summary_red');
            


        %% Calculate adjusted ratio and plot

            %% Calculate adjusted ratio

            %add in 789 empty frames prior to frames to fit (790-1) ie fstart-1
            
            fluff = NaN((fstart-1),1); %create matrix of NaNs
            ratios = [fluff; bc_ratio];
            raw_ratios = [fluff; smoothraw_ratios];
            frames = [fluff; frames_to_fit];
            seconds = (1/9.9)*(0:(length(ratios)-1))';
    
    
            %Calculate baseline-adjusted ratio
            R0 = mean(ratios(bstart:bend),'omitnan'); 
            rawR0 = mean(raw_ratios(bstart:bend),'omitnan'); 
    
            %calculate baseline-adjusted ratios (R-R0 /R0)
            adjratios = ((ratios - R0)/R0);
            raw_adjratios = ((raw_ratios - rawR0)/rawR0);



            %% Plot baseline-adjusted ratio
            figure
            hold on
            ylim ([ploty1,ploty2]);
            xlim ([timesecs(1), timesecs(end)]);
            title(short_fname)
            
            % add shading for stim ON/OFF
            xcoords = [timesecs(1:end-1); timesecs(1:end-1); timesecs(2:end); timesecs(2:end)];
            colors3d = colors( :,1);
            colors3d(:,:,2) = colors(:,2);
            colors3d(:,:,3) = colors(:,3);
            patch(xcoords, ycoords, colors3d, 'FaceAlpha', .3,'EdgeAlpha',0 )
            plot(seconds, adjratios,'Color',[0 0.4470 0.7410], 'LineWidth', 1.5)
            
            xticks(timesecs) %s since baseline begins
            xticklabels(timelabels) %time in secs since baseline begins
            xlabel('Time (s)')
            ylabel('(R - R0)/R0')
             
            % Save plot
            singleplotname = strcat(strain_name, short_fname);
            singleplotname = fullfile(pdirR0,singleplotname);
            saveas(gcf,singleplotname,'png');
            singleplotname = strcat(singleplotname,'.eps');
            exportgraphics(gcf,singleplotname,'ContentType','vector');
            close


            %% add current adjratios and short_fname to output
            %first need to make dimensions match
            %this fills shorter of two matrices with nans to match length of longer

            %this is necessary because not all videos have exactly the same
            %number of frames
            if e > 1
                maxl = max(length(all_adjratios), length(adjratios)) ; %maxl is length of longer matrix
                adjratios(end+1 : maxl) = NaN; %fills with nan from end of adjratios to maxl (if = doesnt change)
                all_adjratios(end+1 : maxl, :) = NaN; %fills with nan from end of all_adjratios to maxl, along ALL columns (if = doesnt change)
            end        
            
            if e > 1
                maxl = max(length(raw_all_adjratios), length(raw_adjratios)) ; %maxl is length of longer matrix
                raw_adjratios(end+1 : maxl) = NaN; %fills with nan from end of adjratios to maxl (if = doesnt change)
                raw_all_adjratios(end+1 : maxl, :) = NaN; %fills with nan from end of all_adjratios to maxl, along ALL columns (if = doesnt change)
            end    


            all_adjratios =[all_adjratios adjratios]; %concatenate current adjratios to matrix of all_adjratios
            raw_all_adjratios =[raw_all_adjratios raw_adjratios]; %concatenate current adjratios to matrix of all_adjratios
            col_names{e} = short_fname; %add current figname to cell array storing names of all datasets
            


        
        
    end
        
    %% Within-group averaging and plots

        %% plot average of all traces with SEM
        
     
        % calculate average excluding NaN
        avg_all_adjratios = mean(all_adjratios,2,'omitnan');
        raw_avg_all_adjratios = mean(raw_all_adjratios,2,'omitnan');


      
        figure
        ylim ([ploty1avg,ploty2avg]);
        xlim ([timesecs(1), timesecs(end)]);
        title(strcat('Average all traces+SEM ', strain_name))
        %add shading for stim ON/OFF
        patch(xcoords, ycoords, colors3d, 'FaceAlpha', .3,'EdgeAlpha',0 )
        hold on
        
        %Add SEM
        %calculate SEM of all_adjratios
        SEM = std(all_adjratios,0,2, 'omitnan')/sqrt(length(files_to_analyse)); %sqrt(n) length of files to analyse is number of files to analyse
        %set bounds for SEM (adjratios +- SEM)
        meanPlusSEM = avg_all_adjratios + SEM;
        meanMinusSEM = avg_all_adjratios - SEM;
        

        %calculate SEM of RAW all_adjratios
        rawSEM = std(raw_all_adjratios,0,2, 'omitnan')/sqrt(length(files_to_analyse)); %sqrt(n) length of files to analyse is number of files to analyse


        
        %This generates the +/- SEM shading
        patch([seconds(timeframes(1): end)' flip(seconds(timeframes(1): end))'], [meanPlusSEM(timeframes(1): end)' flip(meanMinusSEM(timeframes(1): end))'],[0 0.4470 0.7410], 'EdgeColor', 'none', 'FaceAlpha', 0.4); 
        
        %plot mean 
        plot(seconds, avg_all_adjratios,'Linewidth', 1)
        
        xticks(timesecs) %s since baseline begins
        xticklabels(timelabels) %time in secs since baseline begins
        xlabel('Time (s)')
        ylabel('(R - R0)/R0')
        
        %save plot
        SEMplotname = strcat(strain_name, 'SEMplot');
        SEMplotname = fullfile(pdirR0,SEMplotname);
        saveas(gcf,SEMplotname,'png');
        SEMplotname = strcat(SEMplotname,'.eps');
        exportgraphics(gcf,SEMplotname,'ContentType','vector');
        
        close
   
        
        
        %% Plot all traces + average 
        
        figure
        hold on
        
        ylim ([ploty1,ploty2]);
        xlim ([timesecs(1), timesecs(end)]);
        title(strcat('Single Traces + AVG ', strain_name))
        %add shading for stim ON/OFF
        patch(xcoords, ycoords, colors3d, 'FaceAlpha', .3,'EdgeAlpha',0 )
        
        plot(seconds, all_adjratios,'LineWidth', 0.6)
        plot(seconds, avg_all_adjratios, 'k', 'LineWidth', 1.5)
        
        xticks(timesecs) %s since baseline begins
        xticklabels(timelabels) %time in secs since baseline begins
        xlabel('Time (s)')
        ylabel('(R - R0)/R0')
        
        alltraceavgname = strcat(strain_name, 'alltavgplot');
        alltraceavgname = fullfile(pdirR0,alltraceavgname);
        saveas(gcf,alltraceavgname,'png');
        alltraceavgname = strcat(alltraceavgname,'.eps');
        exportgraphics(gcf,alltraceavgname,'ContentType','vector');
        close
        clear alltraceavgname
        
        
        %% Plot heatmap
        figure
        all_adjratiosT = all_adjratios'; %save transpose of all_adjratios
        avg_all_adjratiosT = avg_all_adjratios';%save transpose of avg_all_adjratios
        
        %create vector to indicate odour on and off periods
        odour = zeros(1,length(all_adjratiosT)); 
        odour(timeframes(1):timeframes(2)) = hmy1; %odour off (baseline)
        odour(timeframes(2):timeframes(3)) = hmy2; %odour on 1
        odour(timeframes(3):timeframes(4)) = hmy1; %odour off 1
        odour(timeframes(4):timeframes(5)) = hmy2; %odour on 2
        odour(timeframes(5):timeframes(6)) = hmy1; %odour off 2
        
        %append average to all_adjratiosT matrix (top row)
        %append odour vector to all_adjratiosT matrix (bottom row)
        all_adjratiosT = [avg_all_adjratiosT; all_adjratiosT; odour];
        
        
        %want to make nans transparent (0 = transparent, 1 = opaque) in plot (will be white)
        %create matrix with 0 if alladjratios = nan and 1 if all adjratios = value
        nanmatrix = ones(size(all_adjratiosT));
        nanmatrix(isnan(all_adjratiosT)) = 0;
        
        
        imagesc(all_adjratiosT, 'AlphaData' , nanmatrix) %from baseline start to end of recording
        
        colormap parula;
        colorbar
        %caxis ( [min(all_adjratios, [], 'all') max(all_adjratios, [], 'all')])
        caxis ([hmy1 hmy2])
        xlim([bstart mend])
        xticks(timeframes) %frames since the recording begins
        xticklabels(timelabels) %time in secs since baseline begins
        xlabel('Time (s)')
        yticks(1:length(all_adjratios))
        yticklabels([{'AVERAGE'} col_names {'ODOUR'}])
        ylabel('Neuron')
        
        
        %Save heatmap
        heatmapname = strcat(strain_name, 'heatmap');
        heatmapname = fullfile(pdirR0,heatmapname);
        saveas(gcf,heatmapname,'png');
        heatmapname = strcat(heatmapname,'.eps');
        exportgraphics(gcf,heatmapname,'ContentType','vector');
        close
        

        %% Save stuff
        %convert all_adjratios to table, change header of each column and write to excel
        Tall_adjratios = array2table(all_adjratios); %convert adjratios to table
        col_names = string(col_names); %convert cell array of strings to string array
        col_names = matlab.lang.makeValidName(col_names, 'Prefix', 'm');% convert col_names to valid variable names (must start with letter)
        Tall_adjratios.Properties.VariableNames(:) = col_names; 
        avgratiostimeSEM = [avg_all_adjratios seconds SEM];
        raw_avgratiostimeSEM = [raw_avg_all_adjratios seconds rawSEM];
        
        
        
        allratiosname = strcat(strain_name, 'all');
        allratiosname = fullfile(pdirR0,allratiosname);
        
        avgratiosname = strcat(strain_name, 'avg');
        avgratiosname = fullfile(pdirR0,avgratiosname);
       
        
        
        writetable(Tall_adjratios, allratiosname,'Filetype', 'spreadsheet'); %write all adj ratios to excel 
        writematrix(avgratiostimeSEM,avgratiosname,'Filetype', 'spreadsheet'); %write avg to excel
        
        
        %store data to plot all conds across same zone
        if     c == 1
            mock = avgratiostimeSEM;
            rawmock = raw_avgratiostimeSEM;
        elseif c == 2 
            avsv = avgratiostimeSEM;
            rawavsv = raw_avgratiostimeSEM;
            
        elseif c == 3 
            sexc = avgratiostimeSEM;
            rawsexc = raw_avgratiostimeSEM;

        end




        %% here write bcnobc portion to plot gray and purple no bc bc(rawmock and raw)

        %calculate SEM top and bottom lines for each condition
        SEMbc_05T = avgratiostimeSEM(:,1) + avgratiostimeSEM(:,3);
        SEMbc_05B = avgratiostimeSEM(:,1) - avgratiostimeSEM(:,3);
        SEMrawT = raw_avgratiostimeSEM(:,1) + raw_avgratiostimeSEM(:,3);
        SEMrawB = raw_avgratiostimeSEM(:,1) - raw_avgratiostimeSEM(:,3);

        figure
        hold on 
        ylim ([ploty1avg,ploty2avg]);
        xlim ([80, time]);
        title(strcat('Average all conditions', strain_name))
        
        xticks([80 90 120 150 180 210]) %s since baseline begins
        xticklabels({'0' '10' '40' '70' '100' '130'}) %time in secs since baseline begins
        xlabel('Time (s)')
        ylabel('(R - R0)/R0')
        
        
        %add shading for stim ON/OFF
        xcoords = [80 90 120 150 180; 80 90 120 150 180; 90 120 150 180 210; 90 120 150 180 210];
        ycoords = [-5 -5 -5 -5 -5 ; +5 +5 +5 +5 +5; +5 +5 +5 +5 +5; -5 -5 -5 -5 -5 ];
        colors = [grayrgb; bluergb; grayrgb; bluergb; grayrgb]; 
        colors3d = colors( :,1);
        colors3d(:,:,2) = colors(:,2);
        colors3d(:,:,3) = colors(:,3);
         
        patch(xcoords, ycoords, colors3d, 'FaceAlpha', .3,'EdgeAlpha',0 )


        %plot time(x) vs ratios(y) and add SEM
        %raw
        plot(raw_avgratiostimeSEM(:,2), raw_avgratiostimeSEM(:,1), 'color', mockgray, 'LineWidth', 1.5)
        patch([raw_avgratiostimeSEM(792:2079,2)' flip(raw_avgratiostimeSEM(792:2079,2))'], [SEMrawT(792:2079)' flip(SEMrawB(792:2079))'], mockgray, 'EdgeColor', 'none', 'FaceAlpha', 0.2); 
        plotname = strcat(strain_name, '_raw');
        title(strcat('Average', plotname))


        %bleach-corrected
        plot(avgratiostimeSEM(:,2), avgratiostimeSEM(:,1), 'color', pdf1purple, 'LineWidth', 1.5)
        patch([avgratiostimeSEM(792:2079,2)' flip(avgratiostimeSEM(792:2079,2))'], [SEMbc_05T(792:2079)' flip(SEMbc_05B(792:2079))'], pdf1purple, 'EdgeColor', 'none', 'FaceAlpha', 0.2); 
        plotname = strcat(strain_name, '_raw_bc');
        title(strcat('Average', plotname))
        plotname = fullfile(pdir3c,plotname);
        saveas(gcf,plotname,'png');
        plotname = strcat(plotname,'.eps');
        exportgraphics(gcf,plotname,'ContentType','vector');
%         close



    end

    %% Here goes within zone across condition plots

    %change strain name to no longer include condition (or else they all say sexcond)
    strain_name = strcat(strain, pars);
    
    %% calculate SEM top and bottom lines for each condition
    SEMmockT = mock(:,1) + mock(:,3);
    SEMmockB = mock(:,1) - mock(:,3);
    SEMavsvT = avsv(:,1) + avsv(:,3);
    SEMavsvB = avsv(:,1) - avsv(:,3);
    SEMsexcT = sexc(:,1) + sexc(:,3);
    SEMsexcB = sexc(:,1) - sexc(:,3);

    %% Plot background
    
    figure
    hold on 
    ylim ([ploty1avg,ploty2avg]);
    xlim ([80, time]); %150 for 70s only, 210 for full video
    title(strcat('Average all conditions', strain_name))
    xticks([80 90 120 150 180 210]) %s since baseline begins
    xticklabels({'0' '10' '40' '70' '100' '130'}) %time in secs since baseline begins
    xlabel('Time (s)')
    ylabel('(R - R0)/R0')
    
    %add shading for stim ON/OFF
    xcoords = [80 90 120 150 180; 80 90 120 150 180; 90 120 150 180 210; 90 120 150 180 210];
    ycoords = [-5 -5 -5 -5 -5 ; +5 +5 +5 +5 +5; +5 +5 +5 +5 +5; -5 -5 -5 -5 -5 ];
    colors = [grayrgb; bluergb; grayrgb; bluergb; grayrgb]; 
    colors3d = colors( :,1);
    colors3d(:,:,2) = colors(:,2);
    colors3d(:,:,3) = colors(:,3);
    patch(xcoords, ycoords, colors3d, 'FaceAlpha', .3,'EdgeAlpha',0 )

    
    % Actual plots

    %plot time(x) vs ratios(y) and add SEM
    %mock
    patch([mock(792:2079,2)' flip(mock(792:2079,2))'], [SEMmockT(792:2079)' flip(SEMmockB(792:2079))'], mockgray, 'EdgeColor', 'none', 'FaceAlpha', 0.2); 
    plot(mock(:,2), mock(:,1), 'color', mockgray, 'LineWidth', 1.5)
    plotname = strcat(strain_name, '_m');
    title(strcat('Average', plotname))
    plotname = fullfile(pdir3c,plotname);
    saveas(gcf,plotname,'png');
%     plotname = strcat(plotname,'.eps');
%     exportgraphics(gcf,plotname,'ContentType','vector');

    %avsv    
    patch([avsv(792:2079,2)' flip(avsv(792:2079,2))'], [SEMavsvT(792:2079)' flip(SEMavsvB(792:2079))'], avsvgreen, 'EdgeColor', 'none', 'FaceAlpha', 0.2); 
    plot(avsv(:,2), avsv(:,1), 'color', avsvgreen, 'LineWidth', 1.5)
    plotname = strcat(strain_name, '_ma');
    title(strcat('Average', plotname))
    plotname = fullfile(pdir3c,plotname);
    saveas(gcf,plotname,'png');
%     plotname = strcat(plotname,'.eps');
%     exportgraphics(gcf,plotname,'ContentType','vector');
    
    %sexc
    patch([sexc(792:2079,2)' flip(sexc(792:2079,2))'], [SEMsexcT(792:2079)' flip(SEMsexcB(792:2079))'], sexcondpink, 'EdgeColor', 'none', 'FaceAlpha', 0.2); 
    plot(sexc(:,2), sexc(:,1), 'color', sexcondpink, 'LineWidth', 1.5)
    plotname = strcat(strain_name, '_masc');
    title(strcat('Average', plotname))
    plotname = fullfile(pdir3c,plotname);
    saveas(gcf,plotname,'png');
    plotname = strcat(plotname,'.eps');
    exportgraphics(gcf,plotname,'ContentType','vector');

    %add lines and save again
    xline(80)
    xline(85)
    xline(90)
    xline(95)
    xline(100)
    xline(105)
    xline(110)
    xline(115)
    xline(120)
    xline(125)
    xline(130)
    xline(135)
    xline(140)
    xline(145)
    xline(150)
    xline(155)
    xline(160)
    xline(165)
    xline(170)
    xline(175)
    xline(180)
    xline(185)
    xline(190)
    xline(195)
    xline(200)
    xline(205)
    plotname = strcat(strain_name, '_masc_lines');
    title(strcat('Average', plotname))
    plotname = fullfile(pdir3c,plotname);
    saveas(gcf,plotname,'png');
%     plotname = strcat(plotname,'.eps');
%     exportgraphics(gcf,plotname,'ContentType','vector');

    close

    %% avsv and sexc alone
    %avsv alone
    figure
    hold on 
    ylim ([ploty1avg,ploty2avg]);
    xlim ([80, time]); %150 for 70s only, 210 for fuill
    xticks([80 90 120 150 180 210]) %s since baseline begins
    xticklabels({'0' '10' '40' '70' '100' '130'}) %time in secs since baseline begins
    xlabel('Time (s)')
    ylabel('(R - R0)/R0')
    patch(xcoords, ycoords, colors3d, 'FaceAlpha', .3,'EdgeAlpha',0 )
    
    plot(avsv(:,2), avsv(:,1), 'color', avsvgreen, 'LineWidth', 1.5)
    patch([avsv(792:2079,2)' flip(avsv(792:2079,2))'], [SEMavsvT(792:2079)' flip(SEMavsvB(792:2079))'], avsvgreen, 'EdgeColor', 'none', 'FaceAlpha', 0.2); 
    plotname = strcat(strain_name, '_a');
    title(strcat('Average', plotname))
    plotname = fullfile(pdir3c,plotname);
    saveas(gcf,plotname,'png');
    plotname = strcat(plotname,'.eps');
    exportgraphics(gcf,plotname,'ContentType','vector');
    close
    
    
    %sexc alone
    figure
    hold on 
    ylim ([ploty1avg,ploty2avg]);
    xlim ([80, time]); %150 for 70s only 210 for full
    xticks([80 90 120 150 180 210]) %s since baseline begins
    xticklabels({'0' '10' '40' '70' '100' '130'}) %time in secs since baseline begins
    xlabel('Time (s)')
    ylabel('(R - R0)/R0')
    patch(xcoords, ycoords, colors3d, 'FaceAlpha', .3,'EdgeAlpha',0 )
    
    plot(sexc(:,2), sexc(:,1), 'color', sexcondpink, 'LineWidth', 1.5)
    patch([sexc(792:2079,2)' flip(sexc(792:2079,2))'], [SEMsexcT(792:2079)' flip(SEMsexcB(792:2079))'], sexcondpink, 'EdgeColor', 'none', 'FaceAlpha', 0.2); 
    plotname = strcat(strain_name, '_sc');
    title(strcat('Average', plotname))
    plotname = fullfile(pdir3c,plotname);
    saveas(gcf,plotname,'png');
%     plotname = strcat(plotname,'.eps');
%     exportgraphics(gcf,plotname,'ContentType','vector');
    close
        
end




